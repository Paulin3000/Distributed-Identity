// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat
// will compile your contracts, add the Hardhat Runtime Environment's members to the
// global scope, and execute the script.
const { ethers } = require("hardhat");

var bigInt = require("big-integer");
// const hre = require("hardhat");

require("@nomiclabs/hardhat-web3");

async function main() {

	// calculate n and acc0 off-chain as base numbers 
	let n = bigInt(47643528160891675565126238547163111887484326886055461416775020064289531390604564705648563220827741441560905225590804091264357726140010074764429939594692182602235322413599096016182557617562288701004156654709452086576034870336750119695378089965791470985478710785584849145500150725644610695795125276924863689844490798629599870574966646813654060926330005592211440615022872009220682541631879141125958326535287959828944991795484308179430662029514851051991144010839809825876366320420647768580310468491284575397858605962168068225300630426537785377598473023539626567846166766986870774130243291659609017875777145878601303912717n); 
	let acc0 = bigInt(17621266142382773614174615728319434627798107601747459646923814612135306245239728690235558002873486695714654363593317636509697669735992222587382420031191701735716188803558390063319837464175593673626492342085018391742136535089257681463192646155736401392584374451461767247472372907736539198332120662694079838142023338060903355511387646740263822910524133939154298424025389806555329961771450633023197173425632660853135910539771780537991916594062284735066180890207436461519486678562728387426850939558582439018870640771157770670431250181084395223118074668046630229539607588897912554661801318180267638637813554796080464807716n); 

	let nHex = n.toString(16); 
	let acc0Hex = acc0.toString(16); 

	let nBig = ethers.BigNumber.from("47643528160891675565126238547163111887484326886055461416775020064289531390604564705648563220827741441560905225590804091264357726140010074764429939594692182602235322413599096016182557617562288701004156654709452086576034870336750119695378089965791470985478710785584849145500150725644610695795125276924863689844490798629599870574966646813654060926330005592211440615022872009220682541631879141125958326535287959828944991795484308179430662029514851051991144010839809825876366320420647768580310468491284575397858605962168068225300630426537785377598473023539626567846166766986870774130243291659609017875777145878601303912717");
	let nBigHex = nBig.toHexString();

	let accBig = ethers.BigNumber.from("17621266142382773614174615728319434627798107601747459646923814612135306245239728690235558002873486695714654363593317636509697669735992222587382420031191701735716188803558390063319837464175593673626492342085018391742136535089257681463192646155736401392584374451461767247472372907736539198332120662694079838142023338060903355511387646740263822910524133939154298424025389806555329961771450633023197173425632660853135910539771780537991916594062284735066180890207436461519486678562728387426850939558582439018870640771157770670431250181084395223118074668046630229539607588897912554661801318180267638637813554796080464807716");
	let accBigHex = accBig.toHexString();

	// const nBytes = ethers.BigNumber.from(n);
	// ethers.utils.hexZeroPad(nBytes.toHexString(), 32);

	// const acc0Bytes = ethers.BigNumber.from(acc0);
	// ethers.utils.hexZeroPad(acc0Bytes.toHexString(), 32)

	// console.log("n"); 
	// console.log(nBytes); 

	// console.log("acc"); 
	// console.log(acc0Bytes); 

	// console.log(nHex)
	// console.log(acc0Hex); 

	// DID Registry contract to deploy 
	const IdentityRegistry = await ethers.getContractFactory('DID'); 
	const identityReg = await IdentityRegistry.deploy(); 
	await identityReg.deployed(); 
	console.log("DID Registry has been deployed to:", identityReg.address); 

	// Credential registry contract to deploy 
	const CredentialRegistry = await ethers.getContractFactory('Credentials');
	const credentialReg = await CredentialRegistry.deploy(); 
	await credentialReg.deployed();
	console.log("Credentials Registry has been deployed to:", credentialReg.address); 

	// admin account registry 
	const AdminRegistry = await ethers.getContractFactory('AdminAccounts');
	const adminReg = await AdminRegistry.deploy(); 
	await adminReg.deployed(); 
	console.log("Admins Registry has been deployed to:", adminReg.address); 

	// issuer registry 
	const IssuerRegistry = await ethers.getContractFactory('Issuers'); 
	const issuerReg = await IssuerRegistry.deploy(adminReg.address); 
	await issuerReg.deployed(); 
	console.log("Issuers Registry has been deployed to:", issuerReg.address); 

	// // sub-accumulator 
	const SubAccumulator = await ethers.getContractFactory('SubAccumulator'); 
	const subAcc = await SubAccumulator.deploy();
	await subAcc.deployed(); 
	console.log("Sub-Accumulator has been deployed to:", subAcc.address); 

	const Accumulator = await ethers.getContractFactory('Accumulator'); 
	const acc = await Accumulator.deploy(issuerReg.address, accBigHex, nBigHex); 
	await acc.deployed();
	console.log("Global accumulator has been deployed to:", acc.address); 
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
